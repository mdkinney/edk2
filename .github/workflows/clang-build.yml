# @file
# A workflow that builds packages using clang and upload it's artifacts.
#
# Copyright (c) Intel Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##
name: CLANG Build

on:
  workflow_dispatch:
  pull_request:
    branches:
      - sandbox/master

jobs:
  build_linux_clang_precheck:
    name: Build Linux CLANGPDB NO-TARGET PreCheck
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tianocore/containers/ubuntu-24-dev:latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - NO-TARGET
        build_arch:
          - X64
        build_package:
          - CryptoPkg,ArmPkg,ArmPlatformPkg,DynamicTablesPkg,EmbeddedPkg,FatPkg,FmpDevicePkg,NetworkPkg,RedfishPkg,PcAtChipsetPkg,MdeModulePkg,MdePkg
          - IntelFsp2Pkg,IntelFsp2WrapperPkg,UefiCpuPkg,PrmPkg,SecurityPkg,ShellPkg,SignedCapsulePkg,SourceLevelDebugPkg,UnitTestFrameworkPkg,StandaloneMmPkg,EmulatorPkg,OvmfPkg,ArmVirtPkg
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install cspell
        run: npm install -g cspell
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: PatchCheck PR
        if: github.event_name == 'pull_request'
        run: python BaseTools/Scripts/PatchCheck.py ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGPDB
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGDPDB
      - name: 'Build BaseTools'
        run: python3 BaseTools/Edk2ToolsBuild.py -t GCC
      - name: 'Build Packages CLANGPDB NO-TARGET'
        run: stuart_ci_build -c ".pytool/CISettings.py" -a ${{ matrix.build_arch }} -t ${{ matrix.build_type }} TOOL_CHAIN_TAG=CLANGPDB -p "${{ matrix.build_package }}"
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Linux NO-TARGET Logs (${{ join(matrix.*, ' - ') }})"
          path: |
            Build/*.txt
        if: always()

  build_linux_clang_ovmf_precheck:
    name: Build Linux CLANGPDB OVMF PreCheck
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tianocore/containers/ubuntu-24-dev:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGPDB
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGDPDB
      - name: 'Build BaseTools'
        run: python3 BaseTools/Edk2ToolsBuild.py -t GCC
      - name: 'Build OVMF Platform'
        run: |
          . ./edksetup.sh
          build -a IA32 -a X64 -t CLANGPDB -b DEBUG -p OvmfPkg/OvmfPkgIa32X64.dsc -D SMM_REQUIRE
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Linux OVMF Precheck Logs"
          path: |
            Build/*.txt
        if: always()

  build_windows_clang:
    needs: [build_linux_clang_precheck, build_linux_clang_ovmf_precheck]
    name: Build Windows (${{ join(matrix.*, ' - ') }})
    runs-on: windows-latest
    env:
      CLANG_HOST_BIN: n
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - DEBUG
          - RELEASE
        build_arch:
          - IA32
          - X64
        build_package:
          - CryptoPkg,FatPkg,FmpDevicePkg,PcAtChipsetPkg,PrmPkg,SourceLevelDebugPkg,UnitTestFrameworkPkg,StandaloneMmPkg,SignedCapsulePkg
          - ArmPkg,ArmPlatformPkg,DynamicTablesPkg,EmbeddedPkg,NetworkPkg,RedfishPkg,MdeModulePkg,MdePkg,IntelFsp2Pkg,IntelFsp2WrapperPkg,UefiCpuPkg,SecurityPkg,ShellPkg
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Install CLANG 20.1.0
        shell: cmd
        run: |
          choco install -y llvm --version=20.1.0
          refreshenv
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGPDB
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGPDB
      - name: 'Build BaseTools'
        run: python BaseTools/Edk2ToolsBuild.py -t VS2022
      - name: 'Build Packages CLANGPDB'
        run: stuart_ci_build -c ".pytool/CISettings.py" -a ${{ matrix.build_arch }} -t ${{ matrix.build_type }} TOOL_CHAIN_TAG=CLANGPDB -p "${{ matrix.build_package }}"
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Windows Logs (${{ join(matrix.*, ' - ') }})"
          path: |
            Build/*.txt
        if: always()

  build_linux_clang:
    needs: [build_linux_clang_precheck, build_linux_clang_ovmf_precheck]
    name: Build Linux (${{ join(matrix.*, ' - ') }})
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tianocore/containers/ubuntu-24-dev:latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - DEBUG
          - RELEASE
        build_arch:
          - IA32
          - X64
        build_package:
          - CryptoPkg,ArmPkg,ArmPlatformPkg,DynamicTablesPkg,EmbeddedPkg,FatPkg,FmpDevicePkg,NetworkPkg,RedfishPkg,PcAtChipsetPkg,MdeModulePkg,MdePkg,IntelFsp2Pkg,IntelFsp2WrapperPkg,UefiCpuPkg,PrmPkg,SecurityPkg,ShellPkg,SignedCapsulePkg,SourceLevelDebugPkg,UnitTestFrameworkPkg,StandaloneMmPkg
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGPDB
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=CLANGDPDB
      - name: 'Build BaseTools'
        run: python3 BaseTools/Edk2ToolsBuild.py -t GCC
      - name: 'Build Packages CLANGPDB'
        run: stuart_ci_build -c ".pytool/CISettings.py" -a ${{ matrix.build_arch }} -t ${{ matrix.build_type }} TOOL_CHAIN_TAG=CLANGPDB -p "${{ matrix.build_package }}"
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Linux Logs (${{ matrix.build_arch}} - ${{ matrix.build_type }})"
          path: |
            Build/*.txt
        if: always()

  build_linux_noopt_unit_tests:
    needs: [build_linux_clang_precheck, build_linux_clang_ovmf_precheck]
    name: Build Linux GCC NOOPT unit tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tianocore/containers/ubuntu-24-dev:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=GCC
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=GCC
      - name: 'Build BaseTools'
        run: python3 BaseTools/Edk2ToolsBuild.py -t GCC
      - name: 'Build Packages GCC NOOPT'
        run: stuart_ci_build -c ".pytool/CISettings.py" -a X64 -t NOOPT TOOL_CHAIN_TAG=GCC
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Linux GCC NOOPT Unit Test Logs"
          path: |
            Build/*.txt
        if: always()

  build_windows_noopt_unit_tests:
    needs: [build_linux_noopt_unit_tests]
    name: Build Windows (${{ join(matrix.*, ' - ') }})
    runs-on: windows-latest
    env:
      CLANG_HOST_BIN: n
    strategy:
      fail-fast: false
      matrix:
        build_package:
          - CryptoPkg,FatPkg,FmpDevicePkg,PcAtChipsetPkg,PrmPkg,SourceLevelDebugPkg,UnitTestFrameworkPkg,StandaloneMmPkg
          - ArmPkg,ArmPlatformPkg,DynamicTablesPkg,EmbeddedPkg,NetworkPkg,RedfishPkg,MdeModulePkg,MdePkg,IntelFsp2Pkg,IntelFsp2WrapperPkg,UefiCpuPkg,SecurityPkg,ShellPkg,SignedCapsulePkg
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Ensure safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Install CLANG 20.1.0
        shell: cmd
        run: |
          choco install -y llvm --version=20.1.0
          refreshenv
      - name: Install OpenCppCoverage
        shell: cmd
        run: |
          env
          choco install -y OpenCppCoverage
          refreshenv
          env
          echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH
          env
      - name: Check OpenCppCoverage
        shell: cmd
        run: |
          env
          opencppcoverage
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: 'Install/Upgrade pip modules'
        run: |
          pip install --upgrade pip
          pip install --upgrade -r pip-requirements.txt
      - name: 'Clone Submodules'
        run: stuart_setup -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=VS2022
      - name: 'Download External Dependencies'
        run: stuart_update -c ".pytool/CISettings.py" TOOL_CHAIN_TAG=VS2022
      - name: 'Build BaseTools'
        run: python BaseTools/Edk2ToolsBuild.py -t VS2022
      - name: 'Build Packages CLANGPDB'
        run: stuart_ci_build -c ".pytool/CISettings.py" -a X64 -t NOOPT TOOL_CHAIN_TAG=VS2022 -p "${{ matrix.build_package }}"
      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: "Upload Windows VS2022 Unit Test Logs (${{ join(matrix.*, ' - ') }})"
          path: |
            Build/*.txt
        if: always()
